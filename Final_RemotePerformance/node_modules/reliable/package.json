{
  "_args": [
    [
      "reliable@git+https://github.com/michelle/reliable.git",
      "/Users/yulicai/GitHub/project_remote_performance/remotePerformance/node_modules/peerjs"
    ]
  ],
  "_from": "git+https://github.com/michelle/reliable.git",
  "_id": "reliable@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/reliable",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/michelle/reliable/master/package.json",
      "gitUrl": "git://github.com/michelle/reliable.git",
      "httpsUrl": "git+https://github.com/michelle/reliable.git",
      "shortcut": "github:michelle/reliable",
      "ssh": "git@github.com:michelle/reliable.git",
      "sshUrl": "git+ssh://git@github.com/michelle/reliable.git",
      "type": "github"
    },
    "name": "reliable",
    "raw": "reliable@git+https://github.com/michelle/reliable.git",
    "rawSpec": "git+https://github.com/michelle/reliable.git",
    "scope": null,
    "spec": "git+https://github.com/michelle/reliable.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/peerjs"
  ],
  "_resolved": "git+https://github.com/michelle/reliable.git#f09ba29d57a05beaa07990171f3fe7b746587aaa",
  "_shasum": "55131143a737393769633ac2778ac7c225276d67",
  "_shrinkwrap": null,
  "_spec": "reliable@git+https://github.com/michelle/reliable.git",
  "_where": "/Users/yulicai/GitHub/project_remote_performance/remotePerformance/node_modules/peerjs",
  "dependencies": {
    "js-binarypack": "0.0.9"
  },
  "description": "Reliable DataChannels.",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-browserify": "^3.0.1",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-uglify": "^0.5.1"
  },
  "gitHead": "f09ba29d57a05beaa07990171f3fe7b746587aaa",
  "main": "./lib/reliable.js",
  "name": "reliable",
  "optionalDependencies": {},
  "readme": "# Reliable transfer over DataChannels\n\n\n## Reliable\n\n`new Reliable(dc)`: A reliable utility class for DataChannel. Takes in a `DataChannel` object.\n* `.send(msg)`: Takes any message and sends it reliably.\n* `.onmessage(msg)`: Called when data is received.\n\n`Reliable.higherBandwidthSDP(sdp)`: This need to be applied to all offer/answer SDPs for Reliable to function properly. Returns the new SDP with added bandwidth. See usage below.\n\n```js\n// Assuming 2 PeerConnections pc1, pc2.\npc1.createOffer(function(offer) {\n  offer.sdp = Reliable.higherBandwidthSDP(offer.sdp);\n  pc1.setLocalDescription(offer, ...);\n});\n\n...\n\n// Same process for answer.\npc2.createAnswer(function(answer) {\n  answer.sdp = Reliable.higherBandwidthSDP(answer.sdp);\n  pc2.setLocalDescription(answer, ...);\n});\n```\n\n## Internal message format\n\n### ACK\n\nThis is an ACK for a chunk of the message.\n\n```js\n[\n  /* type */  'ack',\n  /* id */    message_id,\n  /* ACK */   n   // The next chunk # expected.\n]\n```\n\n### Chunk\n\nThis is a chunk of the message.\n\n```js\n[\n  /* type */  'chunk',\n  /* id */    message_id,\n  /* n */     n,       // The chunk #.\n  /* chunk */ chunk   // The actual binary chunk.\n]\n```\n\n\n### END\n\nThis is the end of a message.\n\n```js\n[\n  /* type */  'end',\n  /* id */    message_id,\n  /* n */     n       // The last index.\n]\n```\n\n\n### Unchunked message\n\nThis is a message that was able to be sent without being chunked.\n\n```js\n[\n  /* type */  'no',\n  /* msg */   payload\n]\n```\n\n## Future plans\n\nUse stream API.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "prepublish": "grunt"
  },
  "version": "0.1.0"
}
